using System.Data;

namespace Krypton.Toolkit
{
    /// <summary>
    /// Represents a dialog form for creating and managing data filters.
    /// This partial class inherits from <see cref="KryptonForm"/> and allows users to define
    /// filtering criteria based on data columns from a source. It supports various
    /// filter operators and can dynamically generate filter options from a <see cref="DataGridView"/>.
    /// </summary>
    internal partial class KryptonOutlookGridFilter : KryptonForm
    {
        /// <summary>
        /// Occurs when the filter criteria have changed.
        /// </summary>
        public event KryptonOutlookGridFilterFilterChangedEventHandler? FilterChanged;

        #region Private Valriables

        /// <summary>
        /// A list of source columns available for filtering.
        /// </summary>
        private List<KryptonOutlookGridFilterSourceColumn> _sourceColumns = [];

        /// <summary>
        /// The threshold for determining whether to use a dropdown for distinct values.
        /// If <see cref="_UseDistinctDisplayLevel"/> is true and the percentage of distinct items
        /// (or absolute count if above 1) is below this level, a combobox is used.
        /// </summary>
        private System.Single _DistinctDisplayLevel = 0.1F; //' The amount of distinct items below which to use a dropdown expression
        /// <summary>
        /// A flag indicating whether to automatically build lists of distinct items for combobox display
        /// based on the <see cref="_DistinctDisplayLevel"/>.
        /// </summary>
        private bool _UseDistinctDisplayLevel = true; //' Whether to automatically build lists of the distinct items
        /// <summary>
        /// The <see cref="DataGridView"/> from which to retrieve column information for filtering.
        /// </summary>
        private DataGridView _DataGrid = null!;

        #endregion Private Valriables

        #region Properties

        /// <summary>
        /// Gets or sets the list of source columns available for filtering.
        /// </summary>
        private List<KryptonOutlookGridFilterSourceColumn> Columns
        {
            get { return _sourceColumns; }
            set { _sourceColumns = value; }
        }

        /// <summary>
        /// If this property is set between 0 and 1 (inclusive), and <see cref="UseDistinctDisplayLevel"/> is set to true, the <c>generateFields</c>
        /// function will add a combobox to any field (column) whose percentage of distinct items relative to total items is less than
        /// the <c>DistinctDisplayLevel</c>.
        /// If this property is set above 1, and <see cref="UseDistinctDisplayLevel"/> is set to true, the <c>generateFields</c> function will
        /// add a combobox to any field (column) whose number of distinct items is less than the <c>DistinctDisplayLevel</c>.
        /// </summary>
        /// <value>A percentage between 0 and 1 (inclusive) or an integer (any decimal value will be truncated) greater than 1.</value>
        /// <returns>The current distinct display level.</returns>
        /// <remarks></remarks>
        private Single DistinctDisplayLevel
        {
            get { return _DistinctDisplayLevel; }
            set
            {
                if (value >= 0)
                {
                    _DistinctDisplayLevel = value;
                    this.Columns = GenerateList(DataGrid);
                }
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether to display some generated fields as combobox options,
        /// determined by using the <see cref="DistinctDisplayLevel"/>.
        /// </summary>
        private bool UseDistinctDisplayLevel
        {
            get { return _UseDistinctDisplayLevel; }
            set
            {
                _UseDistinctDisplayLevel = value;
                this.Columns = GenerateList(DataGrid);
            }
        }

        /// <summary>
        /// Gets the filter string generated by the filter item group.
        /// </summary>
        public string FilterString => FilterItemGroup1.Filter;

        /// <summary>
        /// Gets the list of <see cref="KryptonOutlookGridFilterField"/> objects representing the current filter configuration.
        /// </summary>
        public List<KryptonOutlookGridFilterField> FilterData => FillData();

        /// <summary>
        /// Fills and returns a list of <see cref="KryptonOutlookGridFilterField"/> objects from the current filter item group configuration.
        /// </summary>
        /// <returns>A list of <see cref="KryptonOutlookGridFilterField"/> objects.</returns>
        public List<KryptonOutlookGridFilterField> FillData()
        {
            var data = FilterItemGroup1.FillData();
            return data;
        }

        /// <summary>
        /// Gets or sets the <see cref="DataGridView"/> that this filter dialog points to.
        /// This grid is used to automatically generate the list of available fields for filtering.
        /// </summary>
        private DataGridView DataGrid
        {
            get { return _DataGrid; }
            set { _DataGrid = value; }
        }

        #endregion Properties

        #region Constructors

        /// <summary>
        /// The generic constructor for use by the designer.
        /// Initializes the component and sets up a default filter item.
        /// </summary>
        public KryptonOutlookGridFilter()
        {
            // This call is required by the Windows Form Designer.
            InitializeComponent();

            // Add any initialization after the InitializeComponent() call.
            FilterItemGroup1.Columns = Columns;
            FilterItemGroup1.FilterChanged += FilterItemGroup_FilterChanged;
            FilterItemGroup1.AddFilterItem(new KryptonOutlookGridFilterItem(_sourceColumns));
        }

        /// <summary>
        /// Another constructor that allows you to build your own custom list of fields.
        /// </summary>
        /// <param name="columns">Sets the fields if the user desires to manually build the fields list.</param>
        public KryptonOutlookGridFilter(List<KryptonOutlookGridFilterSourceColumn> columns)
        {
            // This call is required by the Windows Form Designer.
            InitializeComponent();

            // Add any initialization after the InitializeComponent() call.
            this.Columns = columns;
            FilterItemGroup1.Columns = columns;
            FilterItemGroup1.FilterChanged += FilterItemGroup_FilterChanged;
            FilterItemGroup1.AddFilterItem(new KryptonOutlookGridFilterItem(columns));
        }

        /// <summary>
        /// Another constructor that allows you to build your own custom list of fields and pre-populate filter data.
        /// </summary>
        /// <param name="columns">Sets the fields if the user desires to manually build the fields list.</param>
        /// <param name="fieldData">A list of <see cref="KryptonOutlookGridFilterField"/> objects to pre-fill the filter dialog.</param>
        public KryptonOutlookGridFilter(List<KryptonOutlookGridFilterSourceColumn> columns, List<KryptonOutlookGridFilterField>? fieldData)
        {
            // This call is required by the Windows Form Designer.
            InitializeComponent();

            // Add any initialization after the InitializeComponent() call.
            this.Columns = columns;
            FilterItemGroup1.Columns = columns;
            FilterItemGroup1.FilterChanged += FilterItemGroup_FilterChanged;
            FillFields(fieldData);
        }

        /// <summary>
        /// Constructor that builds the list of fields from a <see cref="DataGridView"/> tied to a <see cref="DataTable"/>.
        /// </summary>
        /// <param name="dataGridView">The <see cref="DataGridView"/> from which to get the fields.</param>
        /// <param name="distinctDisplayLevel">
        /// Sets the <see cref="DistinctDisplayLevel">Distinct Display Level</see>.
        /// </param>
        /// <param name="useDistinctDisplaylevel">Sets the <see cref="UseDistinctDisplayLevel">UseDistinctDisplayLevel</see> property.</param>
        public KryptonOutlookGridFilter(DataGridView dataGridView, float distinctDisplayLevel, bool useDistinctDisplaylevel)
        {
            // This call is required by the windows form designer
            InitializeComponent();

            // Add any initialization after the InitializeComponent() call.
            this.DataGrid = dataGridView;
            this._DistinctDisplayLevel = distinctDisplayLevel;
            this._UseDistinctDisplayLevel = useDistinctDisplaylevel;
            this.Columns = GenerateList(dataGridView);
            FilterItemGroup1.Columns = Columns;
            FilterItemGroup1.FilterChanged += FilterItemGroup_FilterChanged;
            //FilterItemGroup1.AddFilterItem(new FilterItem(FilterItem.FieldTypes.StringExpression, Fields));
            FilterItemGroup1.AddFilterItem(new KryptonOutlookGridFilterItem(Columns));
        }



        /// <summary>
        /// Another constructor that allows you to build your own custom fields.
        /// </summary>
        /// <param name="column">the field if the user desires to manually build the field.</param>
        public KryptonOutlookGridFilter(KryptonOutlookGridFilterSourceColumn column)
        {
            // This call is required by the Windows Form Designer.
            InitializeComponent();

            // Add any initialization after the InitializeComponent() call.
            this.Columns = [column];
            FilterItemGroup1.Columns = [column];
            FilterItemGroup1.FilterChanged += FilterItemGroup_FilterChanged;
            FilterItemGroup1.AddFilterItem(new KryptonOutlookGridFilterItem(this.Columns));
        }

        /// <summary>
        /// Another constructor that allows you to build your own custom list of fields and pre-populate filter data.
        /// </summary>
        /// <param name="column">the field if the user desires to manually build the field.</param>
        /// <param name="fieldData">A list of <see cref="KryptonOutlookGridFilterField"/> objects to pre-fill the filter dialog.</param>
        public KryptonOutlookGridFilter(KryptonOutlookGridFilterSourceColumn column, List<KryptonOutlookGridFilterField>? fieldData)
        {
            // This call is required by the Windows Form Designer.
            InitializeComponent();

            // Add any initialization after the InitializeComponent() call.
            this.Columns = [column];
            FilterItemGroup1.Columns = [column];
            FilterItemGroup1.FilterChanged += FilterItemGroup_FilterChanged;
            FillFields(fieldData);
        }

        #endregion Constructors

        #region Public Functions

        /// <summary>
        /// Generates a list of <see cref="KryptonOutlookGridFilterSourceColumn"/> objects from a <see cref="DataGridView"/>.
        /// It inspects the columns of the underlying <see cref="DataTable"/> to create source column definitions.
        /// </summary>
        /// <param name="gridView">The <see cref="DataGridView"/> from which to generate the fields.</param>
        /// <returns>A list of <see cref="KryptonOutlookGridFilterSourceColumn"/> objects.</returns>
        public List<KryptonOutlookGridFilterSourceColumn> GenerateList(DataGridView gridView)
        {
            List<KryptonOutlookGridFilterSourceColumn> fields = [];
            DataTable? table = SharedDataFunctions.GetSourceTable(this._DataGrid);

            if (table != null)
            {
                //' Loop through all the columns in the DataGridView, and adds a field to the list
                foreach (DataGridViewColumn column in gridView.Columns)
                {
                    fields.Add(GenerateColumn(column.HeaderText, table.Columns[column.DataPropertyName]!, table, column.DefaultCellStyle.Format));
                }
            }

            return fields;
        }

        /// <summary>
        /// Clears all existing filter items from the dialog, effectively resetting the filter.
        /// </summary>
        public void ClearFilterItems()
        {
            FilterItemGroup1.ClearFilterItems();
        }

        #endregion Public Functions

        #region Control Events

        /// <summary>
        /// Handles the Click event of the OK button.
        /// Sets the dialog result to OK and closes the form.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void BtnOk_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.OK;
            this.Close();
        }

        /// <summary>
        /// Handles the Click event of the Cancel button.
        /// Sets the dialog result to Cancel and closes the form.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void BtnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        /// <summary>
        /// Handles the Click event of the Clear button.
        /// Clears all filter items in the filter item group.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void BtnClear_Click(object sender, EventArgs e)
        {
            FilterItemGroup1.ClearFilterItems();
            FilterChanged?.Invoke(null!, EventArgs.Empty);
        }

        private void FilterItemGroup_FilterChanged(object sender, EventArgs e)
        {
            FilterChanged?.Invoke(this, EventArgs.Empty);
        }

        #endregion Control Events

        #region Private Methods

        /// <summary>
        /// Populates the filter dialog with a list of pre-existing <see cref="KryptonOutlookGridFilterField"/> objects.
        /// It organizes fields into groups based on their <c>GroupInfo</c> property.
        /// </summary>
        /// <param name="fields">The list of <see cref="KryptonOutlookGridFilterField"/> objects to load.</param>
        private void FillFields(List<KryptonOutlookGridFilterField>? fields)
        {
            // Suspend layout to avoid UI refresh issues while adding filter items
            FilterItemGroup1.SuspendLayout();

            if (fields != null && fields.Count > 0)
            {
                List<KryptonOutlookGridFilterItemGroup> groups = [FilterItemGroup1];

                foreach (var field in fields)
                {
                    KryptonOutlookGridFilterItem item = new(_sourceColumns, field);
                    if (string.IsNullOrEmpty(field.GroupInfo) || field.IsGroupInfoTemp)
                    {
                        FilterItemGroup1.AddFilterItem(item);
                        continue;
                    }

                    string currentGroupName = field.GroupInfo;
                    KryptonOutlookGridFilterItemGroup? group = FindParentGroup(groups, currentGroupName);

                    // If the group does not exist, create a new subgroup
                    if (group == null || group.Title.Replace("Group ", "") != currentGroupName)
                    {
                        if (group == null)
                        {
                            group = FilterItemGroup1.MakeSubGroup(item);
                        }
                        else if (group.Title.Replace("Group ", "") != currentGroupName)
                        {
                            group = group.MakeSubGroup(item);
                        }
                        groups.Add(group);
                    }
                    else
                    {
                        // Add the filter item to the final group (the deepest level)
                        group.AddFilterItem(item);
                    }
                }

                FilterItemGroup1.SetGroupEndOperator(fields);
            }
            else
            {
                // If no fields exist, add a default filter item to the main group
                FilterItemGroup1.AddFilterItem(new KryptonOutlookGridFilterItem(_sourceColumns));
            }

            // Resume layout to reflect the changes
            FilterItemGroup1.ResumeLayout();
        }

        /// <summary>
        /// Finds the appropriate parent <see cref="KryptonOutlookGridFilterItemGroup"/> for a given group name.
        /// It traverses the group hierarchy (e.g., "GroupA.SubGroup1") to locate or create the correct parent.
        /// </summary>
        /// <param name="groups">A list of existing <see cref="KryptonOutlookGridFilterItemGroup"/> objects.</param>
        /// <param name="groupName">The full name of the group to find the parent for.</param>
        /// <returns>The <see cref="KryptonOutlookGridFilterItemGroup"/> that should be the parent, or <c>null</c> if no suitable parent is found.</returns>
        private static KryptonOutlookGridFilterItemGroup? FindParentGroup(List<KryptonOutlookGridFilterItemGroup> groups, string groupName)
        {
            string? currentGroupName = groupName;
            KryptonOutlookGridFilterItemGroup? group = null;

            while (group == null && !string.IsNullOrEmpty(currentGroupName))
            {
                group = groups.FirstOrDefault(g => g.Title.Replace("Group ", "") == currentGroupName);
                if (group == null)
                {
                    string[] groupParts = currentGroupName!.Split('.');
                    if (groupParts.Length > 1)
                        currentGroupName = string.Join(".", groupParts.Take(groupParts.Length - 1));
                    else
                        currentGroupName = null;
                }
            }
            return group;
        }

        /// <summary>
        /// Generates a <see cref="KryptonOutlookGridFilterSourceColumn"/> object from a given <see cref="DataColumn"/>.
        /// This method can also calculate distinct values for the column if <see cref="UseDistinctDisplayLevel"/> is enabled.
        /// </summary>
        /// <param name="display">The text to display for the column in the dropdown list of fields.</param>
        /// <param name="column">The <see cref="DataColumn"/> for which to create a source column.</param>
        /// <param name="table">The <see cref="DataTable"/> in which the column is found.</param>
        /// <param name="format">The <see cref="System.Windows.Forms.DataGridViewCellStyle.Format"/> in which the column is found.</param>
        /// <returns>A <see cref="KryptonOutlookGridFilterSourceColumn"/> object representing the data column.</returns>
        private KryptonOutlookGridFilterSourceColumn GenerateColumn(string display, DataColumn column, DataTable table, string format)
        {
            List<string> distinctValues;
            Type columnType = column.DataType;

            //' If the generator should allow for combo box filter expressions, calculate the distinct values
            if (UseDistinctDisplayLevel)
            {
                distinctValues = SharedDataFunctions.CountDistinct(table, column.ColumnName);
            }
            return new KryptonOutlookGridFilterSourceColumn(column.ColumnName, display, columnType.Name, format);
        }

        #endregion Private Methods

    }
}